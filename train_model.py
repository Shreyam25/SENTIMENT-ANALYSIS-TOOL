# -*- coding: utf-8 -*-
"""TRAIN_MODEL.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yoqgsHtEc6sFHP02ie0WFo2AIVpzF_tX
"""

conn = sqlite3.connect('reviews.db')
dataset = pd.read_sql('SELECT * FROM reviews_table', conn)

dataset.columns

"""or"""

import pandas as pd  # Import the pandas library
df = pd.read_csv("/content/cleaned_imdb_dataset.csv")  # Use pd.read_csv() to call the function

"""Method 1 : Using Logistic Regression Model

"""

from sklearn.feature_extraction.text import TfidfVectorizer

transformer = TfidfVectorizer(stop_words='english', ngram_range=(1, 3),
                              lowercase=True, max_features=100000)
X = transformer.fit_transform(df['cleaned_review'])
y = df['sentiment']

from sklearn.feature_extraction.text import TfidfVectorizer

transformer = TfidfVectorizer(stop_words='english', ngram_range=(1, 3), lowercase=True, max_features=100000)
X = transformer.fit_transform(df['cleaned_review'])
y = df['sentiment']

tfidf = TfidfVectorizer(stop_words='english', ngram_range=(1, 3), lowercase=True, max_features=100000)
tfidf.fit(df['cleaned_review'])  # Fitting the vectorizer on your training data
joblib.dump(tfidf, 'tfidf_vectorizer.pkl')  # Saving the fitted vectorizer

from sklearn.metrics import accuracy_score, f1_score, confusion_matrix
import joblib

def prediction(model, X_train, y_train, X_valid, y_valid):
    model.fit(X_train, y_train)
    pred = model.predict(X_valid)
    acc = accuracy_score(y_valid, pred)
    # Explicitly setting pos_label to 'positive'
    f1 = f1_score(y_valid, pred, pos_label='positive')
    conf = confusion_matrix(y_valid, pred)
    joblib.dump(model, f"model_acc_{acc:.5f}.pkl")
    return model, acc, f1, conf, pred # Add pred to the return values

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import f1_score
X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2 random_state=42, stratify=y)

model = LogisticRegression(C=1, random_state=42, n_jobs=-1)
fit_model, acc, f1, conf, pred = prediction(model, X_train, y_train, X_valid, y_valid)

f1 = f1_score(y_valid, pred, pos_label='positive')

print(f"Accuracy: {acc:.5f}")
print(f"F1_Score: {f1:.5f}")
print(f"Confusion Matrix: {conf}")

"""Method 2- Using GridSearchCV"""

from sklearn.model_selection import train_test_split, GridSearchCV # Import GridSearchCV
from sklearn.pipeline import Pipeline

pipeline = Pipeline([
    ('tfidf', TfidfVectorizer(stop_words='english', ngram_range=(1, 3), lowercase=True)),
    ('clf', LogisticRegression(random_state=42, n_jobs=-1))
])


param_grid = {
    'tfidf__max_features': [50000, 100000, 150000],
    'clf__C': [0.1, 1, 10],
    'tfidf__ngram_range': [(1,2),(1,3)] }

grid_search = GridSearchCV(pipeline, param_grid, cv=5, scoring='f1', n_jobs=-1)
X = df['cleaned_review']
y = df['sentiment']

X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)
grid_search.fit(X_train, y_train)

best_model = grid_search.best_estimator_

y_pred = best_model.predict(X_valid)
accuracy = accuracy_score(y_valid, y_pred)
f1 = f1_score(y_valid, y_pred, pos_label='positive')
confusion = confusion_matrix(y_valid, y_pred)

print(f"Best hyperparameters: {grid_search.best_params_}")
print(f"Accuracy: {accuracy:.5f}")
print(f"F1 Score: {f1:.5f}")
print(f"Confusion Matrix:\n{confusion}")

joblib.dump(best_model, 'best_sentiment_model.pkl')

"""output-
-  Best hyperparameters: {'clf__C': 0.1, 'tfidf__max_features': 50000, 'tfidf__ngram_range': (1, 2)}
- Accuracy: 0.86507
- F1 Score: 0.86987
-  Confusion Matrix:
         [[4106  833]
          [ 505 4472]]

"""